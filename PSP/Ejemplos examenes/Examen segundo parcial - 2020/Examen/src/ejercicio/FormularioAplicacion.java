package ejercicio;



import java.io.*;
import java.security.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.*;

/**
 * Clase que hereda de JFrame y muestra una vista de tipo formulario con botones
 * para interactuar con el usuario y cuadros de texto para recoger información y
 * mostrarla.
 *
 * @author Daniel Paz Lorenzo
 */
public class FormularioAplicacion extends javax.swing.JFrame {

    //Declaración de variables de clase
    private String usuario;
    private String password;
    private String nomFicClavePublica;
    private String nomFicClavePrivada;
    
    private SecretKey clave;
    private File fichero;
    private File claveCifrada;


    /**
     * Constructor de la clase FormularioAplicacion
     *
     * @param usuario insertado por el usuario
     * @param pwd insertado por el usuario
     * @throws NoSuchAlgorithmException
     */
    public FormularioAplicacion(String usuario, String pwd, String nomFicClavePublica, String nomFicClavePrivada) throws NoSuchAlgorithmException {
        initComponents();
        //Inicializar variables de clase
        etiquetaUsuario.setText(usuario);
        etiquetaPwd.setText(pwd);
        this.usuario = usuario;
        this.password = pwd;
        this.fichero = new File("fichero");
        this.nomFicClavePublica = nomFicClavePublica;
        this.nomFicClavePrivada = nomFicClavePrivada;
        
        cifrarClaveAsimetrica(nomFicClavePublica, nomFicClavePrivada);
        //Crear e inicializar clave
        this.clave = generarClaveSercreta(usuario, password);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();
        botonMostrarEncriptado = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        botonGuardarFicheros = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        etiquetaUsuario = new javax.swing.JLabel();
        botonMostrarFicDesencrip = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        cuadroIntroText = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        etiquetaMenPwd = new javax.swing.JLabel();
        etiquetaPwd = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        areaTexto.setAutoscrolls(false);
        jScrollPane1.setViewportView(areaTexto);

        botonMostrarEncriptado.setText("Mostrar Fichero Encriptado");
        botonMostrarEncriptado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarEncriptadoActionPerformed(evt);
            }
        });

        jLabel1.setText("Introducir el texto a encriptar:");

        botonGuardarFicheros.setText("Guardar Fichero Encriptado");
        botonGuardarFicheros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarFicherosActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("BIENVENIDO ");

        etiquetaUsuario.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        etiquetaUsuario.setText("usuario");

        botonMostrarFicDesencrip.setText("Mostrar Fichero Desencriptado");
        botonMostrarFicDesencrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarFicDesencripActionPerformed(evt);
            }
        });

        cuadroIntroText.setColumns(10);
        cuadroIntroText.setRows(5);
        cuadroIntroText.setAutoscrolls(false);
        jScrollPane2.setViewportView(cuadroIntroText);

        etiquetaMenPwd.setText("Password");

        etiquetaPwd.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        etiquetaPwd.setText("pwd");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(botonMostrarEncriptado, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(botonMostrarFicDesencrip, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(etiquetaUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(etiquetaMenPwd)
                        .addGap(10, 10, 10)
                        .addComponent(etiquetaPwd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonGuardarFicheros))
                    .addComponent(jSeparator2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(etiquetaUsuario)
                    .addComponent(etiquetaMenPwd)
                    .addComponent(etiquetaPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel1))
                    .addComponent(botonGuardarFicheros))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonMostrarEncriptado)
                    .addComponent(botonMostrarFicDesencrip))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void cifrarClaveAsimetrica(String nomFicClavePublica, String nomFicClavePrivada){
        try {
            File clavePublicaCifrada = new File(nomFicClavePublica);
            FileOutputStream fosPublica = new FileOutputStream(clavePublicaCifrada);
            File clavePrivadaCifrada = new File(nomFicClavePrivada);
            FileOutputStream fosPrivada = new FileOutputStream(clavePrivadaCifrada);
            
            //Generamos el par de claves RSA (publica y privada)
            System.out.println("Generando par de claves RSA...");
            KeyPairGenerator generadorRSA = KeyPairGenerator.getInstance("RSA");
            generadorRSA.initialize(1024);
            KeyPair claves = generadorRSA.genKeyPair();
            System.out.println("Generada la clave asimétrica.");
            PublicKey clavePublica = claves.getPublic();
            PrivateKey clavePrivada = claves.getPrivate();
            //Convertimos a flujo de bytes
            byte[] bytesClavePublica = clavePublica.getEncoded();
            byte[] bytesClavePrivada = clavePrivada.getEncoded();
            //Guardamos en respectivos ficheros
            fosPublica.write(bytesClavePublica);
            fosPrivada.write(bytesClavePrivada);
            System.out.println("Se han guardado las 2 claves correctamente");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void cifrarClaveSimetrica(){
//         //crear e inicializar el cifrador RSA que se va a encargar de encriptar
//            //la clave AES con la parte pública del par RSA
//            Cipher cifradorRSA= Cipher.getInstance("RSA/ECB/PKCS1Padding");
//            cifradorRSA.init(Cipher.ENCRYPT_MODE, claves.getPublic());
//        
//        //Una vez tenemos este cifrador cogemos los byte de la clave Blowfish y los encriptamos
//        byte[] bytesClaveAES = clave.getEncoded();
//        byte[] claveAESCifrada = cifradorRSA.doFinal(bytesClaveAES);


       
    }
    
    /**
     * Método que resuelve el evento generado al pulsar el botón de mostrar el
     * fichero encriptado mostrandolo en el area de texto
     *
     * @param evt
     */
    private void botonMostrarEncriptadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarEncriptadoActionPerformed

        File ficheroCifrado = new File(fichero + ".cifrado");
        try {
            //Flujo de entrada de fichero
            FileReader fis = new FileReader(ficheroCifrado);
            BufferedReader bis = new BufferedReader(fis);
            String linea;
            //Recorre el fichero y lo muestra en el area de texto
            while ((linea = bis.readLine()) != null) {
                areaTexto.setText(linea);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_botonMostrarEncriptadoActionPerformed

    /**
     * Método que responde al evento de pulsar botón y guarda los sin encriptar
     * y en encriptado en sus respectivos ficheros
     *
     * @param evt
     */
    private void botonGuardarFicherosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarFicherosActionPerformed

        guardarFichero();
        encriptarFichero();
    }//GEN-LAST:event_botonGuardarFicherosActionPerformed

    /**
     * Método que recoge el evento de botón para mostrar el fichero
     * desencriptado
     *
     * @param evt
     */
    private void botonMostrarFicDesencripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarFicDesencripActionPerformed

        File ficheroDesCifrado = descifrarFichero();
        try {
            //Lee fichero y lo muestra en el area de texto
            FileReader fis = new FileReader(ficheroDesCifrado);
            BufferedReader bis = new BufferedReader(fis);
            String linea;
            while ((linea = bis.readLine()) != null) {
                areaTexto.setText(linea);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonMostrarFicDesencripActionPerformed

    /**
     * Método para guardar en un fichero el texto recogido del usuario
     */
    public void guardarFichero() {

        try {
            //Guardamos texto introducido en fichero
            byte[] bufferIn; //array de bytes
            bufferIn = cuadroIntroText.getText().getBytes();//Recoger texto del textBox
            FileOutputStream fs = new FileOutputStream(fichero); //flujo de salida
            fs.write(bufferIn); //Graba el texto introducido en fichero
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Método que lee "fichero", lo encripta con algoritmo AES y lo guarda en
     * "fichero.cifrado"
     */
    public void encriptarFichero() {

        try {
            int bytesLeidos;
            String cadena = "";

            //Creación de objeto Cipher para cifrar, utilizando el algoritmo AES
            Cipher cifrador = Cipher.getInstance("AES/ECB/PKCS5Padding");
            //Inicialización del cifrador en modo CIFRADO o ENCRIPTACIÓN
            cifrador.init(Cipher.ENCRYPT_MODE, clave);
            System.out.println("\nCifrar con AES el " + fichero
                    + ", y dejar resultado en " + fichero + ".cifrado");

            //declaración  de objetos
            byte[] bufferOut = new byte[1000]; //array de bytes
            byte[] bufferCifrado;
            FileInputStream fe = new FileInputStream(fichero); //flujo de entrada 
            FileOutputStream fsc = new FileOutputStream(fichero + ".cifrado"); //flujo de salida

            //lee el fichero de 1k en 1k y pasa los fragmentos leidos al cifrador
            bytesLeidos = fe.read(bufferOut, 0, 1000);
            while (bytesLeidos != -1) {//mientras no se llegue al final del fichero
                //pasa texto claro al cifrador y lo cifra, asignándolo a bufferCifrado
                bufferCifrado = cifrador.update(bufferOut, 0, bytesLeidos);
                fsc.write(bufferCifrado); //Graba el texto cifrado en fichero
                bytesLeidos = fe.read(bufferOut, 0, 1000);
                System.out.println(bufferCifrado);
                cadena = new String(bufferCifrado, "UTF-8");
                System.out.print(cadena);
            }
            bufferCifrado = cifrador.doFinal(); //Completa el cifrado
            cadena = new String(bufferCifrado, "UTF-8");
            System.out.print(cadena);
            fsc.write(bufferCifrado); //Graba el final del texto cifrado, si lo hay
            //Cierra flujos
            fe.close();
            fsc.close();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Método para descifrar el fichero cifrado
     *
     * @return
     */
    public File descifrarFichero() {
        //Creamos los ficheros de cifrado y descifrado
        File ficheroCifrado = new File(fichero + ".cifrado");
        File ficheroDescifrado = new File(fichero + ".descifrado");
        try {
            int bytesLeidos;
            String cadena = "";
            //Crear objeto Cipher con algoritmo AES
            Cipher cifrador = Cipher.getInstance("AES/ECB/PKCS5Padding");
            //Poner cifrador en modo DESCIFRADO o DESENCRIPTACIÓN
            cifrador.init(Cipher.DECRYPT_MODE, clave);
            System.out.println("\nDescifrar con AES el " + ficheroCifrado
                    + ", y dejar en  " + ficheroDescifrado);

            //declaración  de objetos
            FileInputStream fe = new FileInputStream(ficheroCifrado);
            FileOutputStream fs = new FileOutputStream(ficheroDescifrado);
            byte[] bufferClaro;
            byte[] buffer = new byte[1000]; //array de bytes

            //lee el fichero de 1k en 1k y pasa los fragmentos leidos al cifrador
            bytesLeidos = fe.read(buffer, 0, 1000);
            while (bytesLeidos != -1) {//mientras no se llegue al final del fichero
                //pasa texto cifrado al cifrador y lo descifra, asignándolo a bufferClaro
                bufferClaro = cifrador.update(buffer, 0, bytesLeidos);
                fs.write(bufferClaro); //Graba el texto claro en fichero
                bytesLeidos = fe.read(buffer, 0, 1000);
                cadena = new String(bufferClaro, "UTF-8");
                System.out.print(cadena);
            }
            bufferClaro = cifrador.doFinal(); //Completa el descifrado
            cadena = new String(bufferClaro, "UTF-8");
            System.out.println(cadena);
            fs.write(bufferClaro); //Graba el final del texto claro, si lo hay
            //Cerrar flujos
            fe.close();
            fs.close();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(FormularioAplicacion.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ficheroDescifrado;
    }

    /**
     * Método para crear una clave de 128 bits a partir de un número aleatorio
     * con semilla la suma de las cadenas usuario y password
     *
     * @param usuario
     * @param pwd
     * @return
     * @throws NoSuchAlgorithmException
     */
    public SecretKey generarClaveSercreta(String usuario, String pwd) throws NoSuchAlgorithmException {
        //Suma de las cadenas
        String cadena = usuario + pwd;
        //Convertir cadena a array de bytes
        byte[] b = cadena.getBytes();

        //Declarar objeto SecureRandom con semilla el array de bytes
        SecureRandom sr = new SecureRandom();
        sr.setSeed(b);

        //Declaración de objeto KeyGenerator con algoritmo AES e inicializado a 128 bits con número de seguridad aleatorio
        KeyGenerator generador = KeyGenerator.getInstance("AES");
        generador.init(128, sr);
        //Crear objeto SecretKey a través de método de KeyGenerator
        SecretKey claveAES = generador.generateKey();
        System.out.println("Formato: " + claveAES.getFormat());
        System.out.println("Clave");
        mostrarBytes(claveAES.getEncoded());
        return claveAES;
    }

    public static void mostrarBytes(byte[] buffer) {
        System.out.write(buffer, 0, buffer.length);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JButton botonGuardarFicheros;
    private javax.swing.JButton botonMostrarEncriptado;
    private javax.swing.JButton botonMostrarFicDesencrip;
    private javax.swing.JTextArea cuadroIntroText;
    private javax.swing.JLabel etiquetaMenPwd;
    private javax.swing.JLabel etiquetaPwd;
    private javax.swing.JLabel etiquetaUsuario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
