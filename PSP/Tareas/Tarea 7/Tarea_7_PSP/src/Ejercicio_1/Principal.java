/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ejercicio_1;

import java.awt.GraphicsConfiguration;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import static java.lang.System.gc;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;


/**
 *
 * @author Pauda
 */
public class Principal extends javax.swing.JFrame {

    public Principal() {
        initComponents();
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();
        cuadroIntroText = new javax.swing.JTextField();
        botonMostrarTexto = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        botonGuardarFichero = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        jScrollPane1.setViewportView(areaTexto);

        cuadroIntroText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        cuadroIntroText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuadroIntroTextActionPerformed(evt);
            }
        });

        botonMostrarTexto.setText("Mostrar Texto");
        botonMostrarTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarTextoActionPerformed(evt);
            }
        });

        jLabel1.setText("Introduzca texto");

        botonGuardarFichero.setText("Guardar Fichero");
        botonGuardarFichero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarFicheroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botonMostrarTexto)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(cuadroIntroText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonGuardarFichero)
                .addContainerGap(50, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonGuardarFichero)
                    .addComponent(cuadroIntroText, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(botonMostrarTexto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cuadroIntroTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuadroIntroTextActionPerformed

    }//GEN-LAST:event_cuadroIntroTextActionPerformed

    private void botonMostrarTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarTextoActionPerformed
        areaTexto.setText(cuadroIntroText.getText());
    }//GEN-LAST:event_botonMostrarTextoActionPerformed

    private void botonGuardarFicheroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarFicheroActionPerformed

        try {
            File file = new File("c:\\cripto\\fichero");
//        FileInputStream fe = null; //fichero de entrada
            FileOutputStream fsc = null; //fichero de salida cifrado
            FileOutputStream fs = null; //fichero de salida normal
            int bytesLeidos;
            String cadena = "";

//1. Crear e inicializar clave
            System.out.println("1.-Genera clave DES");
//crea un objeto para generar la clave usando algoritmo DES
            KeyGenerator keyGen = KeyGenerator.getInstance("DES");
            keyGen.init(56); //se indica el tamaño de la clave
            SecretKey clave = keyGen.generateKey(); //genera la clave privada

            System.out.println("Clave");
            mostrarBytes(clave.getEncoded()); //muestra la clave
            System.out.println();

//Se Crea el objeto Cipher para cifrar, utilizando el algoritmo DES
            Cipher cifrador = Cipher.getInstance("DES");
//Se inicializa el cifrador en modo CIFRADO o ENCRIPTACIÓN
            cifrador.init(Cipher.ENCRYPT_MODE, clave);
            System.out.println("2.- Cifrar con DES el fichero: " + file
                    + ", y dejar resultado en " + file + ".cifrado");
//declaración  de objetos
            byte[] buffer; //array de bytes
            byte[] bufferCifrado;
            buffer = cuadroIntroText.getText().getBytes();
//        fe = new FileInputStream(file); //objeto fichero de entrada
            fsc = new FileOutputStream(file + ".cifrado"); //fichero de salida
            fs = new FileOutputStream(file); //fichero de salida
//lee el fichero de 1k en 1k y pasa los fragmentos leidos al cifrador
//        bytesLeidos = fe.read(buffer, 0, 1000);
//        while (bytesLeidos != -1) {//mientras no se llegue al final del fichero
//            //pasa texto claro al cifrador y lo cifra, asignándolo a bufferCifrado
//            bufferCifrado = cifrador.update(buffer, 0, bytesLeidos);
//            fs.write(bufferCifrado); //Graba el texto cifrado en fichero
//            bytesLeidos = fe.read(buffer, 0, 1000);
//            System.out.println(bufferCifrado);
//            cadena = new String(bufferCifrado, "UTF-8");
//            System.out.print(cadena);
//        }
//            for (int i = 0; i < buffer.length; i++) {

                bufferCifrado = cifrador.update(buffer);
                fsc.write(bufferCifrado); //Graba el texto cifrado en fichero
                fs.write(buffer); //Graba el texto cifrado en fichero
                cadena = new String(bufferCifrado, "UTF-8");
                System.out.print(cadena);
//            }
//        bufferCifrado = cifrador.doFinal(); //Completa el cifrado
//        cadena = new String(bufferCifrado, "UTF-8");
//        System.out.print(cadena);
//        fs.write(bufferCifrado); //Graba el final del texto cifrado, si lo hay
//Cierra ficheros
//        fe.close();
            fs.close();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonGuardarFicheroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

//    public void guardarFicheroCifrado() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, FileNotFoundException, IOException, IllegalBlockSizeException, BadPaddingException {
//        File file = new File("c:\\cripto\\fichero");
////        FileInputStream fe = null; //fichero de entrada
//        FileOutputStream fsc = null; //fichero de salida cifrado
//        FileOutputStream fs = null; //fichero de salida normal
//        int bytesLeidos;
//        String cadena = "";
//
//        //1. Crear e inicializar clave
//        System.out.println("1.-Genera clave DES");
//        //crea un objeto para generar la clave usando algoritmo DES
//        KeyGenerator keyGen = KeyGenerator.getInstance("DES");
//        keyGen.init(56); //se indica el tamaño de la clave
//        SecretKey clave = keyGen.generateKey(); //genera la clave privada
//
//        System.out.println("Clave");
//        mostrarBytes(clave.getEncoded()); //muestra la clave
//        System.out.println();
//
//        //Se Crea el objeto Cipher para cifrar, utilizando el algoritmo DES
//        Cipher cifrador = Cipher.getInstance("DES");
//        //Se inicializa el cifrador en modo CIFRADO o ENCRIPTACIÓN
//        cifrador.init(Cipher.ENCRYPT_MODE, clave);
//        System.out.println("2.- Cifrar con DES el fichero: " + file
//                + ", y dejar resultado en " + file + ".cifrado");
////declaración  de objetos
//        byte[] buffer; //array de bytes
//        byte[] bufferCifrado;
//        buffer = cuadroIntroText.getText().getBytes();
////        fe = new FileInputStream(file); //objeto fichero de entrada
//        fsc = new FileOutputStream(file + ".cifrado"); //fichero de salida
//        fs = new FileOutputStream(file); //fichero de salida
//        //lee el fichero de 1k en 1k y pasa los fragmentos leidos al cifrador
////        bytesLeidos = fe.read(buffer, 0, 1000);
////        while (bytesLeidos != -1) {//mientras no se llegue al final del fichero
////            //pasa texto claro al cifrador y lo cifra, asignándolo a bufferCifrado
////            bufferCifrado = cifrador.update(buffer, 0, bytesLeidos);
////            fs.write(bufferCifrado); //Graba el texto cifrado en fichero
////            bytesLeidos = fe.read(buffer, 0, 1000);
////            System.out.println(bufferCifrado);
////            cadena = new String(bufferCifrado, "UTF-8");
////            System.out.print(cadena);
////        }
//        for (int i = 0; i < buffer.length; i++) {
//
//            bufferCifrado = cifrador.update(buffer);
//            fsc.write(bufferCifrado); //Graba el texto cifrado en fichero
//            fs.write(buffer); //Graba el texto cifrado en fichero
//            cadena = new String(bufferCifrado, "UTF-8");
//            System.out.print(cadena);
//        }
////        bufferCifrado = cifrador.doFinal(); //Completa el cifrado
////        cadena = new String(bufferCifrado, "UTF-8");
////        System.out.print(cadena);
////        fs.write(bufferCifrado); //Graba el final del texto cifrado, si lo hay
//        //Cierra ficheros
////        fe.close();
//        fs.close();
//    }

    //método que muestra bytes
    public static void mostrarBytes(byte[] buffer) {
        System.out.write(buffer, 0, buffer.length);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JButton botonGuardarFichero;
    private javax.swing.JButton botonMostrarTexto;
    private javax.swing.JTextField cuadroIntroText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
